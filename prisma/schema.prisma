// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?  // null для OAuth пользователей
  name      String

  // OAuth fields
  googleId  String?  @unique
  githubId  String?  @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (будут добавлены в следующих модулях)
  folders   Folder[]
  notes     Note[]
  tasks     Task[]

  @@map("users")
}

// Папки для заметок
model Folder {
  id     String @id @default(cuid())
  name   String
  userId String

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes Note[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("folders")
}

// Заметки
model Note {
  id       String  @id @default(cuid())
  title    String? // Опционально, если нет - генерируется из текста
  content  String  // Основной текст заметки
  userId   String
  folderId String

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}

// Задачи (без папок)
model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  completed   Boolean @default(false)
  userId      String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}
